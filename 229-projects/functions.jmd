# Questions to be handed in for project 2: Functions in Julia



Read about this [here](http://mth229.github.io/functions.html).

For the impatient, it is easy with `Julia` to create mathematical
functions, as the notation is identical:

```
f(x) = x^2 - 2
f(2)
```

As with typical mathematical notation the function is called by passing a value to it with parentheses.

That covers most of the uses within this project, but there is more...

1) Julia functions can have more than one variable:

```
rectarea(b, h) = b * h		# area of rectangle
```

2) Julia functions with different signatures, can have the same name!

```
rectarea(b) = rectarea(b,b)	# area of square using area of rectangle
```

3) Multiline functions are defined with the `function` keyword

```
function multiline_function(x)
	 top = x^2 - 2x
	 bottom = x^4 - 4x
	 top/bottom		# last line is return value
end				# don't forget the end
```

4) Functions can have keyword arguments (like parameters). These have default values:

```
mxplusb(x; m=0, b=1) = m*x + b
mxplusb(10, m=3, b=4)		# arguments are named
```

5) Functions can be used as arguments to other functions:

```
using Gadfly			# for plotting
plot(sin, 0, 2pi)		# pass function for first argument plot(f,a,b)
```


6) Functions can be *anonymous*. These are defined via the pattern: "`args -> body`". Look for the arrow `->`:

```
plot(x -> sin(x)*cos(2x), 0, 2pi)
```

7) Functions can be *returned* by other functions (see the "arrow"):

```
secant_line(f, a, b) = x -> f(a) + (f(b) - f(a))/(b-a)*(x-a)
```

----

#### Controlling what gets returned by `IJulia`

When `IJulia` evaluates a cell, it will only display the last command
executed (without explicitly printing).  One useful trick to output more than one value at a time is
to place them into a container. Grouping values within parentheses will produce a "tuple":

```
(1, 2, "a")
```

Tuples will be implicitly constructed if the parentheses are left off. So separating values by commas can be used to have multiple values printed in a cell.


If the values are all of the same type, the preferred container would
be made with `[]`, as in:

```
[1, 2]
```

If the comma is left out, the results are combined "horizontally", which can be a space saver in some cases:

```
[1 2 3 4 5]
```


----

### Questions


* Write a function that describes a line with slope $2$ going through
  the point $(1,3)$. What is the value of $f(10)$?

The function is:

```
```

```julia
shortq("f(x) = 3+2*(x-1)", "function m=2, p = (1,3)", "f(x) = 3+2*(x-1)")
```


The value of $f(10)$ is:

```
```

```julia
f(x) = 3 + 2*(x-1)
val = f(10)
numericq(val, 1e-4)
```

* Write a function to convert Celsius to Fahrenheit $F=9/5 C +
  32$. Use it to find the Fahrenheit value when $C=56.7$ and when
  $C=-89.2$. (The record high and low temperatures.)

The function is

```
```

```julia
shortq("f(x) = 9/5*x+32", "F=9/5 C + 32", "f(x) =  9/5*x+32")
```

The value at $C=56.7$ is

```
```

```julia
f(C) = 9/5 * C + 32
val = f(56.7)
numericq(val, 1e-4)
```

The value at $C=-89.2$ is:


```
```

```julia
val = f(89.2)
numericq(val, 1e-4)
```

* Write a function that computes

$$
f(x) = 4x^2 - 3x  - 7 - \frac{1}{x}
$$

Use it to find the values of $f(1)$, and $f(3)$.

The function is defined by:

```
```

```julia
shortq("f(x) = 4x^2 - 3x  - 7 - 1/x", "\\( 4x^2 - 3x  - 7 - \\frac{1}{x} \\)")
```

The value $f(1)$ is

```
```

```julia
f(x) = 4x^2 - 3x - 7 - 1/x
val = f(1)
numericq(val, 1e-4)
```

The value $f(3)$ is


```
```

```julia
val = f(3)
numericq(val, 1e-4)
```



* Write a function that computes:

$$
f(t) = A\sin(Bt - C) + D
$$

where $A=3.1$, $B=2\pi/365$, $C=1.35$, and $D=12.12$.

This function models the amount of daylight in Boston when $t$ records
the day of the year. How much daylight is there for $t=1$, $t=365/2$,
$t = 35$?


The function is

```
```

```julia
shortq("f(t) = 3.1 * sin(2pi/365*t - 1.35) + 12.12", "Asin(Bt - C) + D",  "\\( f(t) = 3.1\\sin(2pi/365*t - 1.35) + 12.12 \\)")
```

The value at $t=1$ is

```
```

```julia
f(t) =  3.1 * sin(2pi/365*t - 1.35) + 12.12
t = 1
val = f(t)
numericq(val, 1e-4)
```

The value at $t=365/2$ is:


```
```

```julia
365/2
val = f(t)
numericq(val, 1e-4)
```


The value at $t=35$ is:


```
```

```julia
365/2
val = f(t)
numericq(val, 1e-4)
```


* Person A starts at the origin and moves west at 60 MPH. Person B
  starts 200 miles north of the origin and moves south at 70
  MPH. Write a function that computes the distance between the two
  people as a function of $t$ in minutes.

(The $(x,y)$ position of person A is $(60\cdot t/60), 0)$ and the
$(x,y)$ position of person B is $(0, 200 - 70 \cdot t/60)$)

Compute the distance at $t=0$, $t=30$ and $t=120$ using a
function. (You might start by defining the $x$ and $y$ distances with
the following, then using the distance formula as a function of $t$.)

```
x(t) = 60t/60 - 0
y(t) = 0 - (200 - 70t/60)
```


The distance at $t=0$ is:

```
```

```julia
f(t) = sqrt( (60t/60 - 0)^2 + (0 - (200 - 70t/60))^2)
t = 0
val = f(t)
numericq(val, 1e-4, "value at t=$t")
```


The distance at $t=30$ is:

```
```

```julia
t = 30
val = f(t)
numericq(val, 1e-4, "value at t=$t")
```


The distance at $t=120$ is:

```
```

```julia
t = 120
val = f(t)
numericq(val, 1e-4, "value at t=$t")
```

## Cases 

* Write a function to express the following: If a person buys up to 100 units the cost per unit is 5 dollars, for every additional unit beyond 100 the cost is 4 dollars. The function should return the total cost to by $x$ units. (Use the ternary operator with `x <= 100` as the condition.

```
```

```julia
longq("Total cost for x units", "\\verb#f(x) = x <= 100 ? 5.0 * x : (5.0*100) + 4*(x-100) #")
```

* The following function is useful in probability

$$
f(x)= \frac{1}{b-a} \text{ if } a \leq x \leq b, 
$$
$$
0  \text{ otherwise.}
$$


Defaults are $a=0, b=1$.

Write a function using the ternary operator to compute this. The
condition may be expressed with `a <= x <= b`. Find $f(.5, a=0, b=1)$;
$f(.5, a=1, b=2)$, $f(.5,a=0, b=100)$.

The function is:

```
```

```julia
shortq("f(x;a=0,b=1) = a <= x <= b ? 1/(b-a) : 0.0", "function for 1/(b-a) in [a,b]" )
```

The value of $f(.5, a=0, b=1)$ is:

```
```

```julia
f(x;a=0,b=1) = a <= x <= b ? 1/(b-a) : 0.0
val = f(0.5, a=0, b=1)
numericq(val, 1e-4, f(0.5, a=0, b=1))
```

The value of  $f(.5, a=1, b=2)$ is:


```
```

```julia
val = f(0.5, a=1, b=1)
numericq(val, 1e-4, f(0.5, a=1, b=2))
```


The value of $f(.5,a=0, b=100)$ is:


```
```

```julia
val = f(0.5, a=0, b=100)
numericq(val, 1e-4, f(0.5, a=0, b=100))
```


* Define a function $Sin(x) = \sin(x)$ if $-\pi/2 < x < \pi/2$ and
  `NaN` otherwise.


```
```

```julia
shortq("Sin(x) = -pi/2 < x < pi/2 ? sin(x) : NaN", "restrict sin(x) to -pi/2 to pi/2")
```

* Define a function 

$$
signal(x) = 0 \text{ if } x\leq 0,
$$
$$
\sin^2(\pi /2 x) \text{ if } 0<x<1, \text{ and }
$$
$$
1 \text{ if } x\geq 1 
$$

Compare the difference between `signal(0.999)` and `signal(1.001)`.

The function is

```
```

```julia
shortq("signal(x) = (x <= 0) ? 0.0 : ((x <= 1) ? sin(pi/2*x)^2 : 1.0)", "signal function", "signal(x) = (x <= 0) ? 0.0 : ((x <= 1) ? sin(pi/2*x)^2 : 1.0)")
```

The value at $0.999$ is:

```
```

```julia
f(x) = (x <= 0) ? 0.0 : ((x <= 1) ? sin(pi/2*x)^2 : 1.0)
x = 0.9999
val = f(x)
numericq(val, 1e-4, "f($x)")
```


The value at $1.0001 is:

```
```

```julia
x = 1.0001
val = f(x)
numericq(val, 1e-4, "f($x)")
```
## Parameters


* The formula for a [catenary](http://en.wikipedia.org/wiki/Catenary) has a parameter $a$:

$$
y = a \cosh(x/a)
$$

($\cosh(x)$ is the hyperbolic cosine, defined by $(1/2) \cdot (e^x + e^{-x})$. 

Write a function, `c(x;a=1)`, with `a` as a parameter defaulting to
$1$. Compute `c(1)`, `c(1,a=2)`, and `c(1, a=1/2)`.

The function is:

```
```

```julia
shortq("c(x; a=1) = a * cosh(x/a)", "\\( y = a \\cosh(x/a) \\)", "c(x; a=1) = a * cosh(x/a)")
```

The value of `c(1)`:

```
```

```julia
c(x; a=1) =  a * cosh(x/a)
ex = "c(1)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```


The value of `c(1, a=2)`:

```
```

```julia
ex = "c(1, a=2)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```


The value of `c(1, a=1/2)`:

```
```


```julia
ex = "c(1, a=1/2)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```




* Write the following function using parameters for $A$, $B$, $C$, and $D$:

$$
f(t;A,B,C,D) = A\sin(Bt - C) + D
$$

Let the default values be $A=1$, $B=1$, $C=D=0$.

Compute $f(1)$ (using the defaults $A=1$, $C=D=0$), $f(1; B=\pi/2)$, $f(1; A=2\pi, B=\pi/2)$

The function is

```
```

```julia
shortq("f(t;A=1,B=1,C=0,D=0) = A*sin(B*t - C) + D", "\\(f(t;A,B,C,D) = A\sin(Bt - C) + D \\)")
```

The value $f(1)$ is:

```
```

```julia
f(t;A=1,B=1,C=0,D=0) = A*sin(B*t - C) + D
ex = "f(1)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```

The value $f(1; B=\pi/2)$ is:


```
```

```julia
ex = "f(1;B=pi/2)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```

The value $f(1; A=2\pi, B=\pi/2)$ is:



```
```

```julia
ex = "f(1;A=2pi, B=pi/2)"
val = eval(parse(ex))
numericq(val, 1e-4, "$ex")
```





## Returning a function

* Describe what the following function does to the argument $f$, when
  $f$ is a function. (There isn't anything to do but recognize that
  `n` takes a function as input and returns a function as output, this
  question is how is `n(f)` related to `f`.)

```
n(f::Function) = x -> -f(x)
``` 

```
```

```julia
longq("Describe \\verb+n(f::Function) = x -> -f(x)+", "The defines g(x) = -f(x)")
```
